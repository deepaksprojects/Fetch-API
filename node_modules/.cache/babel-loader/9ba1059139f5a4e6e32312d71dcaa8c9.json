{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\Desktop\\\\Kalpas task\\\\fetch-data\\\\src\\\\component\\\\news.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst News = () => {\n  _s();\n\n  const [user, setUser] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postPerPage, setPostPerPage] = useState(6);\n  const param = {\n    noOfPages: 3,\n    contentPerPage: 6,\n    totalContent: 18\n  };\n\n  const getUser = async () => {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    setUser(await response.json());\n  };\n\n  useEffect(() => {\n    getUser();\n  }, []); // get Current post \n\n  const indexOfLastPost = currentPage * postPerPage;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-div\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(News, \"DLsUYxiZsFitSVekWtLaVAth2/Y=\");\n\n_c = News;\nexport default News;\n\nvar _c;\n\n$RefreshReg$(_c, \"News\");","map":{"version":3,"sources":["C:/Users/Lenovo/OneDrive/Desktop/Kalpas task/fetch-data/src/component/news.js"],"names":["React","useEffect","useState","News","user","setUser","currentPage","setCurrentPage","postPerPage","setPostPerPage","param","noOfPages","contentPerPage","totalContent","getUser","response","fetch","json","indexOfLastPost"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAA+BP,QAAQ,CAAC,CAAD,CAA7C;AACA,QAAMQ,KAAK,GAAG;AACZC,IAAAA,SAAS,EAAE,CADC;AAEZC,IAAAA,cAAc,EAAE,CAFJ;AAGZC,IAAAA,YAAY,EAAE;AAHF,GAAd;;AAMA,QAAMC,OAAO,GAAG,YAAY;AAC1B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAA5B;AACAX,IAAAA,OAAO,CAAC,MAAMU,QAAQ,CAACE,IAAT,EAAP,CAAP;AACD,GAHD;;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT,CAfiB,CAsBjB;;AACA,QAAOI,eAAe,GAAGZ,WAAW,GAAGE,WAAvC;AAIA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA0BD,CArDD;;GAAML,I;;KAAAA,I;AAuDN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst News = () => {\r\n  const [user, setUser] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postPerPage, setPostPerPage]= useState(6)\r\n  const param = {\r\n    noOfPages: 3,\r\n    contentPerPage: 6,\r\n    totalContent: 18,\r\n  };\r\n\r\n  const getUser = async () => {\r\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\r\n    setUser(await response.json());\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n  \r\n  \r\n \r\n\r\n  // get Current post \r\n  const  indexOfLastPost = currentPage * postPerPage;\r\n  \r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"news-div\">\r\n        {/* {\r\n        user.map((curEle) => { \r\n        return (\r\n\r\n                <div className=\"news-c-div\" key={curEle.id}>\r\n                <div className=\"img-div\"><img src=\"\\images\\close.svg\" alt=\"\" /></div> \r\n                 <h1>{curEle.title}</h1>\r\n                 <p>{curEle.body}</p>\r\n                 </div>\r\n        )\r\n                 \r\n        })\r\n    } */}\r\n        {/* <div>\r\n          <button> <img src=\"\\images\\arrow_back.svg\" alt=\"\" /></button>\r\n          <button><span>1</span></button>\r\n          <button><span>2</span></button>\r\n          <button><span>3</span></button>\r\n          <button><img src=\"\\images\\arrow_forward.svg\" alt=\"\" /></button>\r\n        </div> */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default News;\r\n"]},"metadata":{},"sourceType":"module"}